<?xml version="1.0"?>
<ruleset name="alex">
	<description>Alexander Obuhovich's coding standard.</description>

	<arg name="tab-width" value="4" />
	<arg name="encoding" value="UTF-8" />

	<exclude-pattern>blog/*</exclude-pattern>
	<exclude-pattern>build/*</exclude-pattern>
	<exclude-pattern>core/editor/*</exclude-pattern>
	<exclude-pattern>core/ckeditor/*</exclude-pattern>
	<exclude-pattern>modules/mpdf/*</exclude-pattern>
	<exclude-pattern>system/*</exclude-pattern>
	<exclude-pattern>vendor/*</exclude-pattern>

	<rule ref="Generic.CodeAnalysis.EmptyStatement"/>

	<!-- Turn off because overlapping with "Squiz.Commenting.EmptyCatchComment" -->
	<rule ref="Generic.CodeAnalysis.EmptyStatement.DetectedCATCH">
		<severity>0</severity>
	</rule>

	<rule ref="Squiz.Commenting.EmptyCatchComment"/>
	<rule ref="Squiz.Commenting.FunctionCommentThrowTag"/>

	<rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>
	<rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall"/>
	<rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>
	<rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
	<rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>
	<!--PMD does this: <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/>-->
	<rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>

	<rule ref="Generic.ControlStructures.InlineControlStructure"/>

	<rule ref="Generic.Files.ByteOrderMark"/>
	<rule ref="Generic.Files.EndFileNewline"/>
	<rule ref="Generic.Files.InlineHTML"/>
	<rule ref="Generic.Files.LineEndings"/>

	<rule ref="Generic.Files.LineLength">
		<properties>
			<property name="lineLimit" value="120"/>
			<property name="absoluteLineLimit" value="140"/>
		</properties>
		<exclude-pattern>*_config.php</exclude-pattern>
	</rule>

	<rule ref="Generic.Files.OneClassPerFile">
		<exclude-pattern>constants.php</exclude-pattern>
		<exclude-pattern>*Test.php</exclude-pattern>
	</rule>

	<rule ref="Generic.Files.OneInterfacePerFile">
		<exclude-pattern>*Test.php</exclude-pattern>
	</rule>

	<rule ref="CodingStandard.NamingConventions.ValidVariableName.MemberNotCamelCaps">
		<exclude-pattern>e_*.php</exclude-pattern>
	</rule>

	<rule ref="CodingStandard.NamingConventions.ValidFunctionName.ScopeNotCamelCaps">
		<exclude-pattern>e_*.php</exclude-pattern>
	</rule>

	<rule ref="Generic.Formatting.DisallowMultipleStatements"/>
	<rule ref="Generic.Formatting.NoSpaceAfterCast"/>

	<rule ref="Generic.Functions.CallTimePassByReference"/>
	<rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>

	<!--PMD does this: <rule ref="Generic.Metrics.CyclomaticComplexity"/>-->

	<rule ref="Generic.Metrics.NestingLevel"/>

	<rule ref="Generic.NamingConventions.ConstructorName"/>
	<rule ref="Generic.NamingConventions.UpperCaseConstantName"/>

	<rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/>
	<rule ref="Generic.PHP.DeprecatedFunctions"/>
	<rule ref="Generic.PHP.DisallowShortOpenTag"/>
	<rule ref="Generic.PHP.ForbiddenFunctions">
		<properties>
			<property
				name="forbiddenFunctions"
			 	type="array"
				value="sizeof=>count,delete=>unset,print=>echo,join=>implode"
			/>
		</properties>
	</rule>
	<rule ref="Generic.PHP.LowerCaseConstant"/>
	<rule ref="Generic.PHP.LowerCaseKeyword"/>
	<rule ref="Generic.PHP.SAPIUsage"/>

	<rule ref="Generic.Strings.UnnecessaryStringConcat"/>

	<rule ref="Generic.WhiteSpace.DisallowSpaceIndent"/>

	<rule ref="Generic.WhiteSpace.ScopeIndent">
		<properties>
			<property name="tabIndent" value="true"/>
		</properties>
	</rule>

	<!-- Don't apply to "core" folder, because creates a lot of noise -->
	<rule ref="Generic.WhiteSpace.ScopeIndent.IncorrectExact">
		<exclude-pattern>/core/</exclude-pattern>
		<exclude-pattern>\core\</exclude-pattern>
	</rule>

	<rule ref="Squiz.Arrays.ArrayBracketSpacing"/>

	<rule ref="MySource.PHP.EvalObjectFactory"/>

	<rule ref="PSR2.Methods.FunctionCallSignature"/>

	<rule ref="PEAR.Functions.ValidDefaultValue"/>

	<rule ref="PSR2.Namespaces.UseDeclaration"/>

	<rule ref="Squiz.Classes.LowercaseClassKeywords"/>
	<rule ref="Squiz.Classes.SelfMemberReference"/>

	<rule ref="CodingStandard.Classes.ClassDeclaration"/>

	<rule ref="PEAR.Functions.FunctionDeclaration"/>

	<rule ref="CodingStandard.Commenting.FunctionComment">
		<exclude-pattern>*Test.php</exclude-pattern>
		<exclude-pattern>*TestCase.php</exclude-pattern>
	</rule>
	<rule ref="CodingStandard.Commenting.DocComment">
		<exclude-pattern>*Test.php</exclude-pattern>
		<exclude-pattern>*TestCase.php</exclude-pattern>
	</rule>

	<rule ref="CodingStandard.Classes.ClassNamespace">
		<exclude-pattern>constants.php</exclude-pattern>
	</rule>

	<!-- Considers "k*" classes as error, which in fact it is -->
	<rule ref="Squiz.Classes.ValidClassName"/>

	<!--
		Temporarily comment-out, because it considers @var type hinting comments as an error
		<rule ref="Squiz.Commenting.BlockComment"/>
	-->

	<rule ref="Squiz.Commenting.DocCommentAlignment"/>
	<rule ref="Squiz.Commenting.VariableComment"/>

	<rule ref="Squiz.ControlStructures.ForEachLoopDeclaration">
		<properties>
			<property name="requiredSpacesAfterOpen" value="1"/>
			<property name="requiredSpacesBeforeClose" value="1"/>
		</properties>
	</rule>

	<!-- Turn off because overlapping with "Squiz.WhiteSpace.OperatorSpacing" -->
	<rule ref="Squiz.ControlStructures.ForEachLoopDeclaration.NoSpaceBeforeArrow">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.ControlStructures.ForEachLoopDeclaration.NoSpaceAfterArrow">
		<severity>0</severity>
	</rule>

	<!-- Turn off because overlapping with "CodingStandard.WhiteSpace.ControlStructureSpacing" -->
	<rule ref="Squiz.ControlStructures.ForEachLoopDeclaration.SpacingAfterOpen">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.ControlStructures.ForEachLoopDeclaration.SpaceBeforeClose">
		<severity>0</severity>
	</rule>

	<rule ref="Squiz.ControlStructures.ForLoopDeclaration">
		<properties>
			<property name="requiredSpacesAfterOpen" value="1"/>
			<property name="requiredSpacesBeforeClose" value="1"/>
		</properties>
	</rule>

	<!-- Turn off because overlapping with "CodingStandard.WhiteSpace.ControlStructureSpacing" -->
	<rule ref="Squiz.ControlStructures.ForLoopDeclaration.SpacingAfterOpen">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.ControlStructures.ForLoopDeclaration.SpacingBeforeClose">
		<severity>0</severity>
	</rule>

	<!-- Turn off because overlapping with "Squiz.WhiteSpace.SemicolonSpacing" -->
	<rule ref="Squiz.ControlStructures.ForLoopDeclaration.SpacingBeforeFirst">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.ControlStructures.ForLoopDeclaration.SpacingBeforeSecond">
		<severity>0</severity>
	</rule>

	<!--
		Turn off an unused error message from the Squiz sniff
		that get generated by our custom commenting sniff
	-->
	<rule ref="CodingStandard.Commenting.FunctionComment.ShortNotCapital">
		<severity>0</severity>
	</rule>
	<rule ref="CodingStandard.Commenting.DocComment.ShortNotCapital">
		<severity>0</severity>
	</rule>
	<rule ref="CodingStandard.Classes.ClassNamespace.MissingNamespace">
		<severity>0</severity>
	</rule>

	<rule ref="PSR2.ControlStructures.ElseIfDeclaration.NotAllowed">
		<type>error</type>
	</rule>

	<rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>

	<rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
		<properties>
			<property name="equalsSpacing" value="1"/>
		</properties>
	</rule>

	<rule ref="Squiz.Functions.FunctionDeclaration"/>
	<rule ref="Squiz.Functions.GlobalFunction"/>

	<!--
		Temporarily comment-out, because it reports every commented-out code as error
		<rule ref="Squiz.PHP.CommentedOutCode"/>
	-->

	<rule ref="Squiz.PHP.DisallowObEndFlush"/>
	<rule ref="Squiz.PHP.DisallowSizeFunctionsInLoops"/>
	<rule ref="Squiz.PHP.GlobalKeyword"/>
	<rule ref="Squiz.PHP.LowercasePHPFunctions"/>
	<rule ref="Squiz.PHP.NonExecutableCode"/>

	<!-- We have a lot of places without scope right now -->
	<rule ref="Squiz.Scope.MethodScope"/>

	<rule ref="Squiz.Scope.StaticThisUsage"/>
	<rule ref="Squiz.Strings.EchoedStrings"/>
	<rule ref="Squiz.Strings.DoubleQuoteUsage"/>
	<rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace"/>

	<rule ref="Squiz.WhiteSpace.FunctionSpacing">
		<properties>
			<property name="spacing" value="1"/>
		</properties>
	</rule>

	<rule ref="Squiz.WhiteSpace.LanguageConstructSpacing"/>
	<rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>

	<rule ref="PEAR.ControlStructures.MultiLineCondition"/>

	<!-- Turn off because overlapping with "CodingStandard.WhiteSpace.ControlStructureSpacing" -->
	<rule ref="PEAR.ControlStructures.MultiLineCondition.SpacingAfterOpenBrace">
		<severity>0</severity>
	</rule>

	<rule ref="Squiz.WhiteSpace.MemberVarSpacing"/>

	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>

	<!--
		Enforces "===" usage (like in Symfony), but too aggressive for now
		<rule ref="Squiz.Operators.ComparisonOperatorUsage"/>
	-->

	<rule ref="Squiz.WhiteSpace.OperatorSpacing"/>
	<rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>

	<rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>

	<rule ref="Zend.Files.ClosingTag"/>
</ruleset>
