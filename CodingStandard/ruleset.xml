<?xml version="1.0"?>
<ruleset name="alex">
	<description>Alexander Obuhovich's coding standard.</description>
	<!--
		Consider using this (from PHPCS 2.0+) instead setting indentation from 4 to 1 in all indentation checking sniffs
		<arg name="tab-width" value="4" />
	-->

	<rule ref="Generic.CodeAnalysis.EmptyStatement"/>
	<rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>
	<rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall"/>
	<rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>
	<rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
	<rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>
	<!--PMD does this: <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/>-->
	<rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>

	<rule ref="Generic.ControlStructures.InlineControlStructure"/>

	<rule ref="Generic.Files.ByteOrderMark"/>
	<rule ref="Generic.Files.EndFileNewline"/>
	<rule ref="Generic.Files.InlineHTML"/>
	<rule ref="Generic.Files.LineEndings"/>

	<rule ref="Generic.Files.LineLength">
		<properties>
			<property name="lineLimit" value="120"/>
			<property name="absoluteLineLimit" value="140"/>
		</properties>
		<exclude-pattern>**/*_config.php</exclude-pattern>
		<exclude-pattern>**\*_config.php</exclude-pattern>
	</rule>

	<rule ref="Generic.Files.OneClassPerFile">
		<exclude-pattern>constants.php</exclude-pattern>
		<exclude-pattern>*Test.php</exclude-pattern>
	</rule>

	<rule ref="Generic.Files.OneInterfacePerFile">
		<exclude-pattern>*Test.php</exclude-pattern>
	</rule>

	<rule ref="Generic.Formatting.DisallowMultipleStatements"/>
	<rule ref="Generic.Formatting.NoSpaceAfterCast"/>

	<rule ref="Generic.Functions.CallTimePassByReference"/>
	<rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
	<rule ref="Generic.Functions.OpeningFunctionBraceBsdAllman"/>

	<!--PMD does this: <rule ref="Generic.Metrics.CyclomaticComplexity"/>-->

	<rule ref="Generic.Metrics.NestingLevel"/>

	<rule ref="Generic.NamingConventions.ConstructorName"/>

	<rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/>
	<rule ref="Generic.PHP.DeprecatedFunctions"/>
	<rule ref="Generic.PHP.DisallowShortOpenTag"/>
	<rule ref="Generic.PHP.ForbiddenFunctions"/>
	<rule ref="Generic.PHP.LowerCaseConstant"/>
	<rule ref="Generic.PHP.LowerCaseKeyword"/>
	<rule ref="Generic.PHP.NoSilencedErrors"/>
	<rule ref="Generic.PHP.SAPIUsage"/>

	<rule ref="Generic.Strings.UnnecessaryStringConcat"/>

	<rule ref="Generic.WhiteSpace.DisallowSpaceIndent"/>

	<rule ref="Generic.WhiteSpace.ScopeIndent" phpcs-only="true">
		<properties>
			<property name="indent" value="1"/>
		</properties>
	</rule>

	<rule ref="Squiz.Arrays.ArrayBracketSpacing"/>

	<rule ref="MySource.PHP.EvalObjectFactory"/>

	<!--
		checks for aligned parameters
		<rule ref="PEAR.Commenting.FunctionComment"/>
	-->

	<rule ref="PSR2.Methods.FunctionCallSignature">
		<properties>
			<property name="indent" value="1"/>
			<property name="allowMultipleArguments" value="true"/>
		</properties>
	</rule>

	<rule ref="PEAR.Functions.ValidDefaultValue"/>
	<rule ref="PEAR.NamingConventions.ValidVariableName"/>

	<rule ref="PSR2.Namespaces.NamespaceDeclaration"/>
	<rule ref="PSR2.Namespaces.UseDeclaration"/>

	<rule ref="Squiz.Classes.LowercaseClassKeywords"/>
	<rule ref="Squiz.Classes.SelfMemberReference"/>

	<rule ref="CodingStandard.Functions.FunctionDeclaration" phpcs-only="true"/>

	<rule ref="CodingStandard.Commenting.FunctionComment">
		<exclude-pattern>*Test.php</exclude-pattern>
		<exclude-pattern>*TestCase.php</exclude-pattern>
	</rule>

	<rule ref="CodingStandard.Classes.ClassNamespace">
		<exclude-pattern>constants.php</exclude-pattern>
	</rule>

	<!-- considers "k*" classes as error, which in fact it is -->
	<rule ref="Squiz.Classes.ValidClassName"/>

	<!--
		temporarily comment-out, because it considers @var type hinting comments as an error
		<rule ref="Squiz.Commenting.BlockComment"/>
	-->

	<rule ref="Squiz.Commenting.DocCommentAlignment"/>
	<rule ref="Squiz.Commenting.VariableComment"/>

	<!--
		doesn't like spaces inside braces
		<rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
		<rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
	-->

	<!--
		turn off an unused error message from the Squiz sniff
		that get generated by our custom commenting sniff
	-->
	<rule ref="CodingStandard.Commenting.FunctionComment.ShortNotCapital">
		<severity>0</severity>
	</rule>
	<rule ref="CodingStandard.Commenting.DocCommentWrapper.ShortNotCapital">
		<severity>0</severity>
	</rule>

	<rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>

	<rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
		<properties>
			<property name="equalsSpacing" value="1"/>
		</properties>
	</rule>

	<rule ref="Squiz.Functions.FunctionDeclaration"/>
	<rule ref="Squiz.Functions.GlobalFunction"/>

	<!--
		temporarily comment-out, because it reports every commented-out code as error
		<rule ref="Squiz.PHP.CommentedOutCode"/>
	-->

	<rule ref="Squiz.PHP.DisallowObEndFlush"/>
	<rule ref="Squiz.PHP.DisallowSizeFunctionsInLoops"/>
	<rule ref="Squiz.PHP.GlobalKeyword"/>
	<rule ref="Squiz.PHP.LowercasePHPFunctions"/>
	<rule ref="Squiz.PHP.NonExecutableCode"/>

	<!-- we have a lot of places without scope right now -->
	<rule ref="Squiz.Scope.MethodScope"/>

	<rule ref="Squiz.Scope.StaticThisUsage"/>
	<rule ref="Squiz.Strings.EchoedStrings"/>
	<rule ref="Squiz.Strings.DoubleQuoteUsage"/>
	<rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace"/>

	<rule ref="Squiz.WhiteSpace.FunctionSpacing">
		<properties>
			<property name="spacing" value="1"/>
		</properties>
	</rule>

	<rule ref="Squiz.WhiteSpace.LanguageConstructSpacing"/>
	<rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>

	<!--
		Reports multi-line chained method calls as error
		<rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing"/>
	-->

	<rule ref="PEAR.WhiteSpace.ObjectOperatorIndent">
		<properties>
			<property name="indent" value="1"/>
		</properties>
	</rule>

	<rule ref="Squiz.WhiteSpace.MemberVarSpacing"/>

	<!-- maybe can be improved to locate empty lines "right after scope opening" and "right before scope closing" -->
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>

	<!--
	enforces "===" usage (like in Symfony), but too aggressive for now
	<rule ref="Squiz.Operators.ComparisonOperatorUsage"/>
	-->

	<rule ref="Squiz.WhiteSpace.OperatorSpacing"/>
	<rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>
	<rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>

	<rule ref="Zend.Files.ClosingTag"/>
</ruleset>
